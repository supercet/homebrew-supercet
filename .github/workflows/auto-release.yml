name: Auto Release

on:
  push:
    branches: [main]
    paths: ["package.json"]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      isVersionChanged: ${{ steps.version-changed.outputs.isVersionChanged }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - id: current-version
        run: echo "current-version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - id: previous-version
        run: |
          PREV=$(git log --format="%H" --follow -- package.json | head -2 | tail -1)
          if [ -n "$PREV" ]; then
            echo "previous-version=$(git show $PREV:package.json | node -p 'JSON.parse(require("fs").readFileSync(0,"utf8")).version')" >> $GITHUB_OUTPUT
          else
            echo "previous-version=0.0.0" >> $GITHUB_OUTPUT
          fi

      - id: version-changed
        run: |
          if [ "${{ steps.current-version.outputs.current-version }}" != "${{ steps.previous-version.outputs.previous-version }}" ]; then
            echo "isVersionChanged=true" >> $GITHUB_OUTPUT
          else
            echo "isVersionChanged=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-version
    if: needs.check-version.outputs.isVersionChanged == 'true'
    runs-on: macos-latest # Apple Silicon runner
    strategy:
      fail-fast: false
      matrix:
        arch: [arm64, x64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- Node toolchain per-arch ----
      - name: Setup Node 22 (arm64 native)
        if: matrix.arch == 'arm64'
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Rosetta
        if: matrix.arch == 'x64'
        run: sudo softwareupdate --install-rosetta --agree-to-license

      - name: Install Node 22 x64 under Rosetta
        if: matrix.arch == 'x64'
        run: |
          NODE_DIST="https://nodejs.org/dist/v22.0.0/node-v22.0.0-darwin-x64.tar.xz"
          mkdir -p $RUNNER_TEMP/node-x64
          curl -fsSL "$NODE_DIST" | tar -xJ -C $RUNNER_TEMP/node-x64 --strip-components=1
          echo "$RUNNER_TEMP/node-x64/bin" >> $GITHUB_PATH
          # Sanity: should print "darwin x64"
          arch -x86_64 node -p "process.platform + ' ' + process.arch"

      # ---- Install deps and apply patch (postinstall runs patch-package) ----
      - name: Clean install (runs postinstall -> patch-package)
        run: |
          if [ "${{ matrix.arch }}" = "x64" ]; then
            arch -x86_64 npm ci
          else
            npm ci
          fi

      - name: Verify node-pty patch applied
        run: grep -q "node-pty-spawn-helper" node_modules/node-pty/lib/unixTerminal.js

      # ---- Build native addon for the correct ABI/arch ----
      - name: Rebuild node-pty (native addon)
        run: |
          if [ "${{ matrix.arch }}" = "x64" ]; then
            arch -x86_64 npm rebuild node-pty --build-from-source
          else
            npm rebuild node-pty --build-from-source
          fi

      - name: Verify native assets exist
        run: |
          ls node_modules/**/node-pty/build/Release/pty.node
          ls node_modules/**/node-pty/build/Release/spawn-helper

      # ---- Build & Package ----
      - name: Build app (esbuild with --external:node-pty/*.node)
        run: |
          if [ "${{ matrix.arch }}" = "x64" ]; then
            arch -x86_64 npm run build
          else
            npm run build
          fi

      - name: Package single executable
        run: |
          if [ "${{ matrix.arch }}" = "x64" ]; then
            arch -x86_64 npm run bundle:x64
          else
            npm run bundle:arm64
          fi

      # Some deps (e.g. 'open') spawn helper scripts that pkg canâ€™t embed; ship beside the binary.
      - name: Place helper executables next to binary
        run: |
          mkdir -p dist/bundle
          test -f node_modules/open/xdg-open && cp node_modules/open/xdg-open dist/bundle/xdg-open && chmod +x dist/bundle/xdg-open || true

      # ---- Upload per-arch artifact ----
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: supercet-macos-${{ matrix.arch }}
          path: dist/bundle/supercet-macos-${{ matrix.arch }}

  release:
    needs: [check-version, build]
    if: needs.check-version.outputs.isVersionChanged == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download ARM64
        uses: actions/download-artifact@v4
        with:
          name: supercet-macos-arm64
          path: dist/bundle

      - name: Download x64
        uses: actions/download-artifact@v4
        with:
          name: supercet-macos-x64
          path: dist/bundle

      - name: Get version for tag
        id: version
        run: echo "version=$(node -p \"require('./package.json').version\")" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          files: |
            dist/bundle/supercet-macos-arm64
            dist/bundle/supercet-macos-x64
          draft: false
          prerelease: false

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"

      - name: Update Homebrew Formula
        run: ./scripts/update-formula.rb

      - name: Commit and push formula updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Formula/supercet.rb
          git commit -m "Update formula for version ${{ steps.version.outputs.version }}" || echo "No changes"
          git push
