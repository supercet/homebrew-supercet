name: Auto Release

on:
  push:
    branches:
      - main
    paths:
      - "src/**"
      - "package.json"
      - "patches/**"
      - "scripts/**"
      - ".github/workflows/**"

# Cancel superseded PR builds on the same branch
concurrency:
  group: pr-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # --- Only used for release path on push ---
  check-version:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      isVersionChanged: ${{ steps.version-changed.outputs.isVersionChanged }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current version from package.json
        id: current-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Get previous version from git history
        id: previous-version
        run: |
          # Get the previous version from the last commit that changed package.json
          PREVIOUS_COMMIT=$(git log --format="%H" --follow -- package.json | head -2 | tail -1)
          if [ -n "$PREVIOUS_COMMIT" ]; then
            PREVIOUS_VERSION=$(git show $PREVIOUS_COMMIT:package.json | node -p "JSON.parse(require('fs').readFileSync(0, 'utf8')).version")
          else
            PREVIOUS_VERSION="0.0.0"
          fi
          echo "previous-version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          echo "Previous version: $PREVIOUS_VERSION"

      - name: Check if version has changed
        id: version-changed
        run: |
          if [ "${{ steps.current-version.outputs.current-version }}" != "${{ steps.previous-version.outputs.previous-version }}" ]; then
            echo "isVersionChanged=true" >> $GITHUB_OUTPUT
            echo "Version has changed from ${{ steps.previous-version.outputs.previous-version }} to ${{ steps.current-version.outputs.current-version }}"
          else
            echo "isVersionChanged=false" >> $GITHUB_OUTPUT
            echo "Version has not changed (${{ steps.current-version.outputs.current-version }})"
          fi
  # --- PR test build (no release) ---
  pr-build:
    if: github.event_name == 'pull_request'
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [arm64, x64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 22 (arm64 native)
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install Rosetta (for x64 lane)
        if: matrix.arch == 'x64'
        run: sudo softwareupdate --install-rosetta --agree-to-license

      - name: Install Node 22 x64 under Rosetta
        if: matrix.arch == 'x64'
        run: |
          set -euo pipefail
          NODE_VER=$(node -v | sed 's/^v//')
          NODE_DIST="https://nodejs.org/dist/v${NODE_VER}/node-v${NODE_VER}-darwin-x64.tar.xz"
          mkdir -p "$RUNNER_TEMP/node-x64"
          curl -fsSL "$NODE_DIST" | tar -xJ -C "$RUNNER_TEMP/node-x64" --strip-components=1
          echo "$RUNNER_TEMP/node-x64/bin" >> $GITHUB_PATH
          arch -x86_64 node -p "process.version + ' ' + process.platform + ' ' + process.arch"

      - name: Install deps (postinstall -> patch-package)
        run: |
          if [ "${{ matrix.arch }}" = "x64" ]; then
            npm i --os darwin --cpu x64
          else
            npm i --os darwin --cpu arm64
          fi

      - name: Rebuild node-pty for this arch
        run: |
          if [ "${{ matrix.arch }}" = "x64" ]; then
            npm rebuild node-pty --build-from-source --arch=x64
          else
            npm rebuild node-pty --build-from-source --arch=arm64
          fi

      - name: Verify node-pty native assets (portable find)
        shell: bash
        run: |
          set -euo pipefail
          found_pty=$(find node_modules -path "*/node-pty/build/Release/pty.node" -print -quit || true)
          found_helper=$(find node_modules -path "*/node-pty/build/Release/spawn-helper" -print -quit || true)
          if [[ -z "${found_pty}" ]]; then
            echo "::error::pty.node not found"; find node_modules -path "*/node-pty/build/*" -maxdepth 2 -print || true; exit 1; fi
          echo "Found pty.node: ${found_pty}"
          [[ -n "${found_helper}" ]] && echo "Found spawn-helper: ${found_helper}"

      - name: Build (esbuild)
        run: npm run build

      - name: Package single executable (pkg)
        run: |
          if [ "${{ matrix.arch }}" = "x64" ]; then
            npm run bundle:x64
          else
            npm run bundle:arm64
          fi

  # --- Only used for release path on push ---
  build:
    needs: check-version
    runs-on: macos-latest
    if: needs.check-version.outputs.isVersionChanged == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install dependencies
        run: npm install

      - name: Build application
        run: npm run build

      - name: Create binaries
        run: npm run bundle

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: supercet-arm64
          path: dist/bundle/

      - name: Upload x64 binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: supercet-x64
          path: dist/bundle/

  release:
    needs: [check-version, build]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.isVersionChanged == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: supercet-arm64
          path: dist/bundle

      - name: Download x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: supercet-x64
          path: dist/bundle

      - name: Get version for tag
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Creating release for version: $VERSION"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          files: |
            dist/bundle/supercet-arm64
            dist/bundle/supercet-x64
          draft: false
          prerelease: false

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"

      - name: Update Homebrew Formula
        run: |
          ./scripts/update-formula.rb

      - name: Commit and push formula updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Formula/supercet.rb
          git commit -m "Update formula for version ${{ steps.version.outputs.version }}"
          git push
